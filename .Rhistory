5 > 8 || 6 != 8 && 4 > 3.9
isTrue(6 > 4)
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
q()
getwd()
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants0
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20)
sample(1:20, 10)
LETTERS()
LETTERS
sample(LETTERS)
flips <- sample(0,1), 100, replace = TRUE)
sample(c(0,1), 100, replace = TRUE)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips, 1)
sum(flips)
sum(3, 1)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm()
rnorm(10)
rnorm(100, 25)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
rpois(5, mean = 10)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class()
class(t1)
unclass(t1)
t2 <- as.POSIXlt())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekday(d1)
weekdays(d1)
months(t1)
quarters(t2)
t3 <- c("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head()
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot( y = cars$speed, x = cars$dist)
plot(y = cars$speed, x = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
xlim = c(10, 15)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
mtcars
data(mtcars)
?boxplot
boxplot(data = mtcars, mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
q()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
day(this_dat)
day(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
mydate <- ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("1920//1//2")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- Update(this_moment)
?update
this_moment <- update(this_moment)
this_moment <- update(this_moment, hours = 11, minutes = 16, seconds = 32)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
con = url("http://www.seek.com.au/JobSearch?DateRange=7&SearchFrom=quickupper&SearchType=search+again&Keywords=+Driver+hc+or+Driver+mc&state=3107")
htmlCode = readLines(con)
close(con)
htmlCode
head(htmlCode)
library(XML)
url <- "http://www.seek.com.au/JobSearch?DateRange=7&SearchFrom=quickupper&SearchType=search+again&Keywords=+Driver+hc+or+Driver+mc&state=3107"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
head(htmlCode)
htmlCode
xpathSApply(html, "//h2", xmlValue)
xpathSApply(html, "//dd", xmlValue)
xpathSApply(html, "//job-title", xmlValue)
str(xpathSApply(html, "//job-title", xmlValue))
xpathSApply(html, "//a class="job-title", xmlValue)
xpathSApply(html, "//dd", xmlValue)
xpathSApply(html, "//a", xmlValue)
xpathSApply(html, "//article data-bind="attr: {'data-job-id': id}" class="experimental-fade experimental-fade-completed" data-job-id="28306370"", xmlValue)
xpathSApply(html, "//article", xmlValue)
xpathSApply(html, "//article data bind", xmlValue)
xpathSApply(html, "//article data-bind", xmlValue)
xpathSApply(html, "//article", xmlValue)
xpathSApply(html, "//dl", xmlValue)
xpathSApply(html, "//a", xmlValue)
xpathSApply(html, "///a", xmlValue)
xpathSApply(html, "////a", xmlValue)
xpathSApply(html, "/////a", xmlValue)
xpathSApply(html, "//a", xmlValue)
xpathSApply(html, "/a", xmlValue)
xpathSApply(html, "//a", xmlValue)
?oauth
?mutate
?merge
setwd("C:/Users/KOLeary/Documents/Rail Workers")
setwd("C:/Users/KOLeary/Documents/")
dir()
dir()
readfile <- read.csv("Rail Workers.csv", colClasses = "character")
readfile
str(readfile)
readfile <- read.csv("Rail Workers.csv", colClasses = "character")
str(readfile)
readfile
readfile <- read.csv("Rail Workers.csv", colClasses = "character")
str(readfile)
?split
setwd("C:/Users/KOLeary/Documents/GitHub/Getting and Cleaning Data")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile = "./getdata-data-Fss06hid.csv", mode="wb")
codebook <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf")
download.file(codebook, destfile = "./getdata-data-PUMSDataDict06.pdf", mode="wb")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf")
download.file(fileUrl, destfile = "./getdata-data-PUMSDataDict06.pdf", mode="wb")
codebook <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf")
codebook <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf"
download.file(codebook, destfile = "./getdata-data-PUMSDataDict06.pdf", mode="wb")
colnames(getdata-data-Fss06hid.csv)
list.files("./Getting and Cleaning Data")
list.files("Getting and Cleaning Data")
setwd("C:/Users/KOLeary/Documents/GitHub/Getting and Cleaning Data")
list.files("Getting and Cleaning Data")
dir()
readfile <- read.csv("getdata-data-Fss06hid.csv", colClasses = "character")
readfile
library(dplyr)
convertbl <- tbl_df(readfile) ## convert table to tbl
rm("readfile") ## remove other handle
convertbl ##p
select(convertbl, AGS)## fo
select(convertbl, AGS == 6)##
filter(convertbl, AGS == 6") ## f
filter(convertbl, AGS == 6)
filter(convertbl, AGS == 6, ACR == 3) ## for finding row information
agricultureLogical <- filter(convertbl, AGS == 6, ACR == 3)
agricultureLogical
readfile <- read.csv("getdata-data-Fss06hid.csv", colClasses = "character")
?as.logical
readfile$AGS == 6
readfile$AGS == 6 & readfile$ACR == 3
agricultureLogical <- readfile$AGS == 6 & readfile$ACR == 3
which(agricultureLogical)
library(jpeg)
?install.packages
install.packages("jpeg")
library(jpeg)
?jpeg
?READjpeg
?readJPEG
image <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(image, destfile = "./getdata-jeff.jpg", mode="wb")
readJPEG(image, native = TRUE)
readJPEG(getdata-jeff.jpg, native = TRUE)
readJPEG("getdata-jeff.jpg", native = TRUE)
imageview <- readJPEG("getdata-jeff.jpg", native = TRUE)
str(imageview)
?quantile
quantile(imageview,  probs = c(0.3, 0.8)/100)
quantile(imageview,  probs = c(0.3, 0.8)
)
gdpdata <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(gdpdata, destfile = "./getdata-data-GDP.csv", mode="wb")
edata <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(edata, destfile = "./getdata-data-EDSTATS_Country.csv", mode="wb")
readgdp <- read.csv("getdata-data-GDP.csv", colClasses = "character")
readedata <- read.csv("getdata-data-EDSTATS_Country.csv", colClasses = "character")
?match
match(readgdp, readedata )
readedata
head(readedata)
colnames(readedata)
colnames(readgdp)
match(readgdp$Short.Name, readedata$Short.Name )
match(readgdp, readedata )
mergedData = merge(readgdp, readedata, by.x="Short.Name",by.y="Short.Name",all=TRUE)
library(plyr)
library(plyr); library(dplyr)
join(readgdp, readedata, Short.Name)
arrange(join(readgdp, readedata), Short.Name)
colnames(readgdp)
readgdp <- read.csv("getdata-data-GDP.csv", colClasses = "character")
readedata <- read.csv("getdata-data-EDSTATS_Country.csv", colClasses = "character")
colnames(readedata)
?match
match(readgdp, readedata, nomatch = NA_integer_,)
match(readgdp$Short.Name, readedata$Short.Name, nomatch = NA_integer_,)
colnames(readedata)
mergedData = merge(readgdp, readedata, by.x="Short.Name", by.y="Short.Name")
?join
library(plyr)
join(readgdp, readedata, by = Short.Name)
join(readgdp, readedata, by = "Short.Name")
join(readgdp, readedata, by = "Short.Name")
?join
colnames(readedata)
colnames(readgdp)
readgdp <- read.csv("getdata-data-GDP.csv", colClasses = "character")
colnames(readgdp)
readgdp <- read.csv("getdata-data-GDP.csv", colClasses = "character")
colnames(readgdp)
rm("readgdp")
colnames(readgdp)
readgdp <- read.csv("getdata-data-GDP.csv", colClasses = "character")
colnames(readgdp)
colnames(readedata)
colnames(readgdp)
head(readgdp)
mergedData = merge(readgdp, readedata, by.x="Economy", by.y="Short.Name")
colnames(readgdp)
gdpdata <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(gdpdata, destfile = "./getdata-data-GDP.csv", mode="wb")
readgdp <- read.csv("getdata-data-GDP.csv", colClasses = "character")
readedata <- read.csv("getdata-data-EDSTATS_Country.csv", colClasses = "character")
colnames(readgdp)
str(readgdp)
str(readgdp)
rm("readgdp")
gdpdata <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(gdpdata, destfile = "./getdata-data-GDP.csv", mode="wb")
readgdp <- read.csv("getdata-data-GDP.csv", colClasses = "character")
str(readgdp)
mergedData = merge(readgdp, readedata, by.x="X.4", by.y="Short.Name")
mergedData
match(readgdp$X.4, readedata$Short.Name, nomatch = NA_integer_,)
match(readgdp$X.4, readedata$Short.Name)
x <- c(1,2,3,4,5,6,8)
y <- c(1,2,3,4,8,9,0)
match(x, y)
x <- c(a,b,c,d,5,6,8)
y <- c(a,b,c,d,8,9,0)
x <- c("a","b","c",4,5,6,8)
y <- c("a","b","c", 4,8,9,0)
match(x, y)
?data.frame
data.frame(x = 1:10, y = 5:15)
data.frame(x = 1:10, y = 5:14)
data.frame(bob = 1:10, tom = 5:14)
bob <- data.frame(bob = 1:10)
tom <- data.frame(tom = 5:14)
bob
match(bob, tom)
match(bob$bob, tom$tom)
match(readgdp$X.4, readedata$Short.Name)
?match
match(bob$bob, tom$tom, nomatch = NA_integer_)
match(bob$bob, tom$tom)
match(readedata$Short.Name, readgdp$X.4)
colnames(readgdp)
readgdp <- read.csv("getdata-data-GDP.csv", colClasses = "character", skip=4)
readedata <- read.csv("getdata-data-EDSTATS_Country.csv", colClasses = "character")
colnames(readgdp)
readgdp <- read.csv("getdata-data-GDP.csv", colClasses = "character", skip=5)
colnames(readgdp)
readgdp <- read.csv("getdata-data-GDP.csv", colClasses = "character", skip=4)
colnames(readgdp)
head(readgdp)
match(readgdp$X.4, readedata$Short.Name)
match(readedata$Short.Name, readgdp$X.4)
colnames(readedata)
colnames(readgdp)
head(readedata)
readedata <- read.csv("getdata-data-EDSTATS_Country.csv", colClasses = "character", skip=1)
colnames(readedata)
readedata <- read.csv("getdata-data-EDSTATS_Country.csv", colClasses = "character")
?match
bob <- data.frame(bob = c(1,2,3, 4, 5)
tom <- data.frame(tom = c(5,4,3,2,1)
bob <- data.frame(bob = c(1,2,3,4,5))
tom <- data.frame(tom = c(5,4,3,2,1))
match(bob$bob, tom$tom)
bob <- data.frame(bob = c(1,5,3,2,4))
tom <- data.frame(tom = c(5,4,3,2,1))
match(bob$bob, tom$tom)
bob <- data.frame(bob = c(1,5,"d",2,4))
tom <- data.frame(tom = c(5,4,3,2,"d"))
match(bob$bob, tom$tom)
bob <- data.frame(bob = c(1,2,3))
tom <- data.frame(tom = c(3,2,1)
)
match(bob$bob, tom$tom)
bob <- data.frame(bob = c(1,2,3))
tom <- data.frame(tom = c(3,1,2))
match(bob$bob, tom$tom)
match(tom$tom, bob$bob)
match(tom$tom, bob$bob)
match(readgdp$X.4, readedata$Short.Name)
colnames(readedata)
match(readgdp$X.1, readedata$WB.2.code)
match(readedata$WB.2.code, readgdp$X.1)
bob <- data.frame(bob = c("AU","US","UK"))
tom <- data.frame(tom = c("UK", "AU", "US"))
match(tom$tom, bob$bob)
readedata$WB.2.code
readgdp$X.1
colnames(readedata)
match(readgdp$X.1, readedata$CountryCode)
match(readedata$CountryCode, readgdp$X.1)
readedata$CountryCode
readgdp$X.1
head(readgdp)
readgdp$X
match(readgdp$X, readedata$CountryCode)
match(readedata$CountryCode, readgdp$X)
match_tables <- match(readgdp$X, readedata$CountryCode)
class(match_tables)
match_tables <- data.frame(match(readgdp$X, readedata$CountryCode))
class(match_tables)
match_tables
match_tables
bob <- data.frame(bob = c(3,2,1))
bob
arrange(bob, bob$1)
str(match_tables)
match_tables <- data.frame(matchcol = match(readgdp$X, readedata$CountryCode))
str(match_tables)
colnames(match_tables)
library(dplyr)
match_tables <- arrange(match_tables, matchcol)
match_tables
match_tables <- arrange(match_tables, desc(matchcol))
match_tables
head(match_tables)
match_tables
head(match_tables)
matchcol = match(readgdp$X, readedata$CountryCode
matchcol = match(readgdp$X, readedata$CountryCode)
matchcol = match(readgdp$X, readedata$CountryCode)
matchcol
head(readgdp)
arrange(readgdp, desc(X.1))
readgdp <- read.csv("getdata-data-GDP.csv", colClasses = "character", skip=4)
arrange(readgdp, desc(X.1))
gdpordered <- arrange(readgdp, desc(X.1))
gdpordered
readgdp <- arrange(readgdp, desc(X.1))
readgdp
library(dplyr)
readgdp <- arrange(readgdp, desc(X.1))
readgdp
rm("readgdp")
convertbl <- tbl_df(readgdp) ## convert table to tbl
rm("readgdp") ## remove other handle
convertbl ##print converted table
readgdp <- read.csv("getdata-data-GDP.csv", colClasses = "character", skip=4)
convertbl <- tbl_df(readgdp) ## convert table to tbl
rm("readgdp") ## remove other handle
convertbl ##print converted table
convertbl <- arrange(convertbl, desc(X.1))
convertbl
colnames(convertbl)
convertbl <- arrange(convertbl, desc(X.1))
convertbl
class(convertbl)
str(convertbl)
?na.last
?NA.last
?arrange
convertbl <- arrange(convertbl, desc(X.1), na.last = TRUE)
convertbl
convertbl <- tbl_df(readgdp) ## convert table to tbl
rm("readgdp") ## remove other handle
convertbl
readgdp <- read.csv("getdata-data-GDP.csv", colClasses = "character", skip=4) ##skip the
convertbl <- tbl_df(readgdp)
convertbl
newconvertbl <- arrange(convertbl, X.1)
newconvertbl
convertbl
newconvertbl <- arrange(convertbl, X.2)
newconvertbl
newconvertbl <- arrange(convertbl, desc(X.2))
newconvertbl
newconvertbl <- arrange(convertbl, desc(X.2))
newconvertbl
convertbl <- tbl_df(readgdp) ## convert table to tbl
rm("readgdp") ## remove other handle
convertbl ##print converted table
newconvertbl <- arrange(convertbl, desc(X.2))
newconvertbl
newconvertbl <- arrange(convertbl, desc(X.1))
convertbl <- tbl_df(readgdp) ## convert table to tbl
rm("readgdp") ## remove other handle
convertbl ##print converted table
newconvertbl <- arrange(convertbl, desc(X.1))
newconvertbl
convertbl <- tbl_df(readgdp) ## convert table to tbl
rm("readgdp") ## remove other handle
convertbl ##print converted table
arrange(convertbl, X.1)
