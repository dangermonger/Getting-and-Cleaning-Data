library()
library(swirl)
swirl()
num_vect <- (0.5, 55, -10, 6)
num_vect(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
print(tf)
tf
num_vect >= 6
my_char <- ("My", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Dangermonger")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = " ")
paste(1:3, c("X", "Y", "Z", sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x x 3
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na, TRUE)
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect[bar]
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length()
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, my_data)
colnames(my_data)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 NOT= 7
5 = NOT 7
?NOT
??NOT
5 !== 7
5 != 7
5 !== 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTrue(6 > 4)
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
q()
getwd()
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants0
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20)
sample(1:20, 10)
LETTERS()
LETTERS
sample(LETTERS)
flips <- sample(0,1), 100, replace = TRUE)
sample(c(0,1), 100, replace = TRUE)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips, 1)
sum(flips)
sum(3, 1)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm()
rnorm(10)
rnorm(100, 25)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
rpois(5, mean = 10)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class()
class(t1)
unclass(t1)
t2 <- as.POSIXlt())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekday(d1)
weekdays(d1)
months(t1)
quarters(t2)
t3 <- c("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head()
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot( y = cars$speed, x = cars$dist)
plot(y = cars$speed, x = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
xlim = c(10, 15)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
mtcars
data(mtcars)
?boxplot
boxplot(data = mtcars, mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
q()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
day(this_dat)
day(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
mydate <- ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("1920//1//2")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- Update(this_moment)
?update
this_moment <- update(this_moment)
this_moment <- update(this_moment, hours = 11, minutes = 16, seconds = 32)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
con = url("http://www.seek.com.au/JobSearch?DateRange=7&SearchFrom=quickupper&SearchType=search+again&Keywords=+Driver+hc+or+Driver+mc&state=3107")
htmlCode = readLines(con)
close(con)
htmlCode
head(htmlCode)
library(XML)
url <- "http://www.seek.com.au/JobSearch?DateRange=7&SearchFrom=quickupper&SearchType=search+again&Keywords=+Driver+hc+or+Driver+mc&state=3107"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
head(htmlCode)
htmlCode
xpathSApply(html, "//h2", xmlValue)
xpathSApply(html, "//dd", xmlValue)
xpathSApply(html, "//job-title", xmlValue)
str(xpathSApply(html, "//job-title", xmlValue))
xpathSApply(html, "//a class="job-title", xmlValue)
xpathSApply(html, "//dd", xmlValue)
xpathSApply(html, "//a", xmlValue)
xpathSApply(html, "//article data-bind="attr: {'data-job-id': id}" class="experimental-fade experimental-fade-completed" data-job-id="28306370"", xmlValue)
xpathSApply(html, "//article", xmlValue)
xpathSApply(html, "//article data bind", xmlValue)
xpathSApply(html, "//article data-bind", xmlValue)
xpathSApply(html, "//article", xmlValue)
xpathSApply(html, "//dl", xmlValue)
xpathSApply(html, "//a", xmlValue)
xpathSApply(html, "///a", xmlValue)
xpathSApply(html, "////a", xmlValue)
xpathSApply(html, "/////a", xmlValue)
xpathSApply(html, "//a", xmlValue)
xpathSApply(html, "/a", xmlValue)
xpathSApply(html, "//a", xmlValue)
?oauth
?mutate
?merge
setwd("C:/Users/KOLeary/Documents/Rail Workers")
setwd("C:/Users/KOLeary/Documents/")
dir()
dir()
readfile <- read.csv("Rail Workers.csv", colClasses = "character")
readfile
str(readfile)
readfile <- read.csv("Rail Workers.csv", colClasses = "character")
str(readfile)
readfile
readfile <- read.csv("Rail Workers.csv", colClasses = "character")
str(readfile)
?split
setwd("C:/Users/KOLeary/Documents/GitHub/Getting and Cleaning Data")
readgdp <- read.csv("getdata-data-GDP.csv", colClasses = "character", skip=4) ##sk
readgdp
library(dplyr)
convertbl <- tbl_df(readgdp)
rm("readgdp") ## remove other handle
convertbl
arrange(convertbl, X.1)
tailpeek <- arrange(convertbl, X.1)
tail(tailpeek)
convertbl
?skip
readgdp <- read.csv("getdata-data-GDP.csv", colClasses = "character", skip=4, nrows = 3) #
readgdp
readgdp <- read.csv("getdata-data-GDP.csv", colClasses = "character", skip=4, nrows = 190)
tail(readgdp)
convertbl <- tbl_df(readgdp) ## convert table to tbl
rm("readgdp") ## remove other handle
convertbl ##print converted table
tailpeek <- arrange(convertbl, X.1)
tail(tailpeek)
head(tailpeek)
convertbl
tail(convertbl)
tailpeek <- arrange(convertbl, X.1)
tailpeek
str(convertbl)
rm("readgdp")
readgdp <- read.csv("getdata-data-GDP.csv", skip=4, nrows = 190) ##
str(readgdp)
convertbl <- tbl_df(readgdp) ## convert table to tbl
rm("readgdp") ## remove other handle
convertbl ##print converted table
str(convertbl)
tailpeek <- arrange(convertbl, X.1)
tailpeek
tailpeek <- arrange(convertbl, desc(X.1))
tailpeek
?head
head(tailpeek, 13)
readedata <- read.csv("getdata-data-EDSTATS_Country.csv")
readedata
match_tables <- data.frame(matchcol = match(readgdp$X, readedata$CountryCode))
readgdp <- read.csv("getdata-data-GDP.csv", skip=4, nrows = 190) ##
match_tables <- data.frame(matchcol = match(readgdp$X, readedata$CountryCode)) ##creates a dataframe of matched columns with a named column
str(match_tables)
colnames(match_tables)
match_tables
match_tables
library(dplyr)
match_tables <- arrange(match_tables, desc(matchcol))
head(match_tables)
readgdp <- read.csv("getdata-data-GDP.csv", skip=4, nrows = 190) ##skip the top four rows and reads only the first 190 lines
readedata <- read.csv("getdata-data-EDSTATS_Country.csv")
match_tables <- data.frame(matchcol = match(readgdp$X, readedata$CountryCode)) ##creates a dataframe of matched columns with a named column
str(match_tables)
match(readgdp$X, readedata$CountryCode)
match_tables <- data.frame(matchcol = match(readedata$CountryCode, readgdp$X))
str(match_tables)
match(readedata$CountryCode, readgdp$X
)
match_tables <- data.frame(matchcol = match(readgdp$X, readedata$CountryCode), GDP = readgdp$X) ##creates a dataframe of matched columns with a named column
str(match_tables)
match_tables <- data.frame(matchcol = match(readgdp$X, readedata$CountryCode), GDP = readgdp$X) ##creates a dataframe of matched columns with a named column
str(match_tables)
match_tables
match_tables <- data.frame(matchcol = match(readgdp$X, readedata$CountryCode), countrycode = readgdp$X) ##creates a dataframe of matched columns with a named column
str(match_tables)
tail(match_tables)
colnames(readgdp)
match_tables <- data.frame(matchcol = match(readgdp$X, readedata$CountryCode), GDP = readgdp$X.1)
match_tables
colnames(readedata)
gdpave <- data.frame(GDP = readgdp$X.1, IncomeGroup = readedata$Income.Group)
match_tables <- data.frame(matchcol = match(readgdp$X, readedata$CountryCode), IncomeGroup = readedata$Income.Group)
match(readedata$CountryCode, readgdp$X)
gdpave <- data.frame(matchcol = match(readedata$CountryCode, readgdp$X), IncomeGroup = readedata$Income.Group)
gdpave
bob <- data.frame(bob = c(3,2,1))
tom <- data.frame(tom = c("UK", "AU", "US"))
match(tom$tom, bob$bob)
bob <- data.frame(bob = c(3,2,1))
tom <- data.frame(tom = c(1, 3, 2, 6))
match(tom$tom, bob$bob)
bob <- data.frame(bob = c("a","b","c"))
tom <- data.frame(tom = c("c", "a", "d", "b"))
match(tom$tom, bob$bob) ##order is important here!!
order <- data.frame(matchcol = match(tom$tom, bob$bob), tomtom = tom$tom)
order
library(dplyr)
match_tables <- arrange(order, matchcol)
head(match_tables)
colnames(readedata)
gdpave <- data.frame(matchcol = match(readedata$CountryCode, readgdp$X), CountryCode = CountryCode, IncomeGroup = readedata$Income.Group)
gdpave <- data.frame(matchcol = match(readedata$CountryCode, readgdp$X), CountryCode = readedata$CountryCode, IncomeGroup = readedata$Income.Group)
gdpave
gdpave <- data.frame(matchcol = match(readedata$CountryCode, readgdp$X), CountryCode = readedata$CountryCode, IncomeGroup = readedata$Income.Group, CountryName = readedata$Short.Name)
gdpave
library(dplyr)
match_tables <- arrange(gdpave, matchcol)
head(match_tables)
match_tables
match_tables <- arrange(gdpave, matchcol, nrows = 190)
match_tables <- arrange(gdpave, matchcol)
match_tables
convertbl <- tbl_df(gdpave) ## convert table to tbl
rm("gdpave") ## remove other handle
convertbl
match_tables <- arrange(convertbl, matchcol)
match_tables
filter(convertbl, IncomeGroup == "High income: OECD")
?sum
hinkave <- sum(highink$matchcol)/ length(matchcol)
highink <- filter(convertbl, IncomeGroup == "High income: OECD")
hinkave <- sum(highink$matchcol)/ length(matchcol)
highink
?dplyr
str(highink)
sum(highink$matchcol)
colMeans(highink)
colMeans(highink$matchcol)
?mean
mean(highink$matchcol)
highinknon <- filter(convertbl, IncomeGroup == "High income: nonOECD")
mean(highinknon$matchcol)
highinknon
?arrange
?na.rm
?filter
highinknon <- filter(convertbl, IncomeGroup == "High income: nonOECD", na.rm = TRUE)
str(highinknon)
highinknon%>%
na.omit()
na.omit(highinknon)
mean(highinknon$matchcol)
mean(nonas)
nonas <- na.omit(highinknon)
mean(nonas)
mean(nonas$matchcol)
str(match_tables)
match_tables <- data.frame(matchcol = match(readgdp$X, readedata$CountryCode), GDP = readgdp$X.1) ##
str(match_tables)
tail(match_tables, 13)
match_tables <- data.frame(matchcol = match(readgdp$X, readedata$CountryCode), CountryCode = readedata$CountryCode)
match_tables <- data.frame(matchcol = match(readgdp$X, readedata$CountryCode), CountryCode = readgdp$X)
tail(match_tables, 13)
match_tables <- data.frame(matchcol = match(readgdp$X, readedata$CountryCode), Country = readgdp$X.3)
tail(match_tables, 13)
match_tables <- arrange(match_tables, matchcol)
match_tables
match_tables <- data.frame(matchcol = match(readgdp$X, readedata$CountryCode), Country = readgdp$X.3) ##creates a dataframe of matched columns with a named column
str(match_tables) ## results i
match_tables
match_tables <- data.frame(matchcol = match(readgdp$X, readedata$CountryCode), Country = readgdp$X.3, na.rm = TRUE)
str(match_tables)
na.omit(match_tables)
match_tables <- arrange(convertbl, matchcol)
match_tables
quantile(match_tables,  probs = c(0.3, 0.8))
quantile(match_tables,  probs = c(0.3, 0.8), na.rm = TRUE)
tail(match_tables)
match_tables
tail(match_tables)
filter(match_tables, matchcol == "NA")
filter(match_tables, matchcol == "1")
filter(match_tables, matchcol == NA)
?nrows
nonatable <- na.omit(match_tables)
tail(nonatable)
str(nonatable)
match_tables
str(nonatable)
head(nonatable, 38)
str(nonatable)
headtable <- head(nonatable, 38)
colnames(headtable)
match_tables
howink <- filter(headtable, IncomeGroup == "Lower middle income")
howink
