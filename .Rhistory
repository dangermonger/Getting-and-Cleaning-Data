sample(1:20)
sample(1:20, 10)
LETTERS()
LETTERS
sample(LETTERS)
flips <- sample(0,1), 100, replace = TRUE)
sample(c(0,1), 100, replace = TRUE)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips, 1)
sum(flips)
sum(3, 1)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm()
rnorm(10)
rnorm(100, 25)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
rpois(5, mean = 10)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class()
class(t1)
unclass(t1)
t2 <- as.POSIXlt())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekday(d1)
weekdays(d1)
months(t1)
quarters(t2)
t3 <- c("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head()
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot( y = cars$speed, x = cars$dist)
plot(y = cars$speed, x = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
xlim = c(10, 15)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
mtcars
data(mtcars)
?boxplot
boxplot(data = mtcars, mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
q()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
day(this_dat)
day(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
mydate <- ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("1920//1//2")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- Update(this_moment)
?update
this_moment <- update(this_moment)
this_moment <- update(this_moment, hours = 11, minutes = 16, seconds = 32)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(swirl)
ls()
rm(list=ls())
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
desc(ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- \select(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb == size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb == size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb == size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
avg_bytes <- summarize(cran, avy_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
setwd("C:/Users/KOLeary/Documents/GitHub/Getting and Cleaning Data")
library(httr)
##install.packages("jsonlite")
##install.packages("httpuv")
library(jsonlite)
library(httpuv)
##remove.packages("Rcpp")
##install.packages("Rcpp")
##remove.packages("jsonlite")
##install.packages("jsonlite")
##remove.packages("httpuv")
##install.packages("httpuv")
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("Coursera Instructor Repos",  "1b507cb194dd89792f4d", "5c983dee0199947cc13ef57171bfb423a1a49b0c")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[json2$releases_url]
json2$releases_url
colnames(json2)
library(dplyr)
convertbl <- tbl_df(json2)
rm("json2")
convertbl
select(convertbl, releases_url, created_at)## for columns
json2$releases_url
json2 = jsonlite::fromJSON(toJSON(json1))
json2
colnames(json2)
json2$releases_url
convertbl <- tbl_df(json2)
json2$created_at
data.frame(json2$releases_url,json2$created_at)
newdf <- data.frame(json2$releases_url,json2$created_at)
str(newdf)
?data.frame
newdf <- data.frame(x = json2$releases_url, y = json2$created_at)
str(newdf)
df <- data.frame(x = 1:5, y = A:E)
df <- data.frame(x = 1:5, y = "A":"E")
df <- data.frame(x = 1:5, y = "A":"E")
str(df)
df <- data.frame(1, 1:10, sample(L3, 10, replace = TRUE))
str(df)
L3 <- LETTERS[1:3]
df <- data.frame(1, 1:10, sample(L3, 10, replace = TRUE))
str(df)
L3 <- LETTERS[1:3]
df <- data.frame(1:10, sample(L3, 10, replace = TRUE))
str(df)
df <- data.frame(1:10, LETTERS[1:10])
str(df)
df
df <- data.frame(1:5, LETTERS[1:5])
str(df)
df
col1 <- json2$releases_url
col2 <- json2$created_at
df <- data.frame(x = 1:5, y = LETTERS[1:5])
df
col1 <- json2$releases_url
col2 <- json2$created_at
newdf <- data.frame(col1, col2)
newdf
str(newdf)
newdf <- data.frame(x = col1, y = col2)
str(newdf)
json2$releases_url
str(col1)
test1 <- list( c(a='a',b='b',c='c'), c(a='d',b='e',c='f'))
test1
newdf <- as.data.frame(col1, col2)
str(newdf)
str(col1)
list1 = list( c(a='a',b='b',c='c')
list1 = list( c(a='a',b='b',c='c'))
list1 = list( c(a='a',b='b',c='c'))
str(list1)
str(col1)
test1 <- list(col1, col2)
as.data.frame(test1)
test2 <- as.data.frame(test1)
str(test2)
test1 <- list( c(a='a',b='b',c='c'), c(a='d',b='e',c='f'))
as.data.frame(test1)
subset(json2, json2$releases_url)
subset(json2, releases_url)
json2$releases_url
subset(json2, releases_url = "https://api.github.com/repos/jtleek/datasharing/releases{/id}")
df <- data.frame(x = 1:5, y = LETTERS[1:5])
str(df)
subset(df, x = 3)
str(col1)
list1 = list( c(a='a',b='b',c='c'))
str(list1)
list1 = list( 1:5)
str(list1)
class(list1)
class(col1)
list1 = list(1:5)
str(list1)
list1 = list(1:5, 3:6, 7:8)
str(list1)
list2 = list("a", "b", "c")
str(list2)
as.data.frame(list1, list2)
?as.data.frame
df <- data.frame(list1, list2)
list1 <- list(1:5, 3:6, 7:8)
list2 <- list("a", "b", "c")
as.data.frame(list1, list2)
df <- data.frame(list1, list2)
list1 <- list(1, 5, 8)
list2 <- list("a", "b", "c")
df <- data.frame(list1, list2)
df
as.data.frame(list1, list2)
as.data.frame(x = list1, y = list2)
list1 <- list(1, 5, 8)
list2 <- list("a", "b", "c")
as.data.frame(x = list1, y = list2)
str(json2)
colnames(json2)
json2[44]
json2[44:45]
new <- json2[44:45]
str(new)
library(dplyr)##bring up dplr library
convertbl <- tbl_df(new)##
convertbl##pri
library(dplyr)##bring up dplr library
convertbl <- tbl_df(new)## convert table to tbl
rm("new") ## remove other handle
convertbl##print converted table
new <- json2[44:45]
new
str(new)
class(new)
colnames(json2)
new[new$releases_url]
colnames(new)
new$releases_url
new[new$releases_url == "https://api.github.com/repos/jtleek/datasharing/releases{/id}"]
new[releases_url == "https://api.github.com/repos/jtleek/datasharing/releases{/id}"]
new["releases_url" == "https://api.github.com/repos/jtleek/datasharing/releases{/id}"]
str(new)
new[new$releases_url" == "https://api.github.com/repos/jtleek/datasharing/releases{/id}"]
new[new$releases_url]
new[new, new$releases_url]
new[releases_url]
colnames(new)
new["releases_url"]
new["releases_url" == "https://api.github.com/repos/jtleek/datasharing/releases{/id}"]
new2 <- new["releases_url" == "https://api.github.com/repos/jtleek/datasharing/releases{/id}"]
new2
new
class(new)
str(new)
colnames(new)
subset(new, "releases_url" = "https://api.github.com/repos/jtleek/datasharing/releases{/id}")
subset(new, releases_url = "https://api.github.com/repos/jtleek/datasharing/releases{/id}")
subset(new, releases_url = https://api.github.com/repos/jtleek/datasharing/releases{/id})
subset(new, releases_url = 5)
subset(new, "releases_url" = 5)
subset(new, "releases_url" > 5)
colnames(new)
str(new)
xsub <- subset(new, "releases_url" > 5)
xsub
thing <- list("A", "B", "C")
thing[1]
subset(new, "releases_url"[5])
subset(new, releases_url[5])
releases_url[5]
new[5]
new[1, 5]
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile = "./getdata-data-06pid.csv")
library(sqldf)
install.library("sqldf")
install.packages("sqldf")
acs <- read.csv("getdata-data-06pid.csv")
head(acs)
sqldf("select * from acs where AGEP < 50 and pwgtp1")
library(sqldf)
sqldf("select * from acs where AGEP < 50 and pwgtp1")
sqldf("select * from acs where AGEP < 50")
sqldf("select pwgtp1 from acs")
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select distinct AGEP from acs")
sqldf("select AGEP where unique from acs")
sqldf("select unique AGEP from acs")
sqldf("select unique * from acs")
library(XML)
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
names(html)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
str(HtmlCode)
test <- htmlCode
str(test)
?nchar
nchar(htmlread[10])
htmlread <- htmlCode
nchar(htmlread[10])
nchar(htmlread[20])
nchar(htmlread[30])
nchar(htmlread[100])
nchar(htmlread[10, 20])
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(fileUrl, destfile = "./getdata-data-sst8110.for")
fwfread <- read.fwf("getdata-data-sst8110.for")
fwfread <- read.fwf("getdata-data-sst8110.for", width = 9)
fwfread
head(fwread)
head(fwfread)
class(fwfread)
str(fwfread)
fwfread <- read.fwf("getdata-data-sst8110.for", width = 15)
str(fwfread)
fwfread <- read.fwf("getdata-data-sst8110.for", width = 15)
fwfread
fwfread <- read.fwf("getdata-data-sst8110.for", width = 2)
fwfread
fwfread <- read.fwf("getdata-data-sst8110.for", width = 100)
fwfread
fwfread <- read.fwf("getdata-data-sst8110.for", width = 100)
head(fwfread)
fwfread <- read.fwf("getdata-data-sst8110.for", width = 200)
head(fwfread)
summary(fwfread)
str(fwfread)
fwfread
fwfread <- read.fwf("getdata-data-sst8110.for", width = 2000)
head(fwfread)
fwfread <- read.fwf("getdata-data-sst8110.for",
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(fwfread)
cat(">",paste0(rep(c(1:9,"+"),6),collapse=""))
fwfread <- read.fwf("getdata-data-sst8110.for",
skip=4,
width=2000)
fwfread
fwfread[1]
fwfread[[1]]
fwfread <- read.fwf("getdata-data-sst8110.for",
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(fwfread)
fwfread <- read.fwf("getdata-data-sst8110.for",
skip=4,
width=2000)
class(fwfread)
str(fwfread)
head(fwfread)
cat(">",paste0(rep(c(1:9,"+"),6),collapse=""))
?cat
fwfread <- read.fwf("getdata-data-sst8110.for",
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
fwfread
head(fwfread)
?sum
sum(fwfread$V4)
fwfread <- read.fwf("getdata-data-sst8110.for",
skip=4,
width=2000)
head(fwfread)
str(fwfread)
fwfread <- read.fwf("getdata-data-sst8110.for",
skip=1253,
width=200)
fwfread
fwfread <- read.fwf("getdata-data-sst8110.for",
skip=1251,
width=200)
fwfread
str(fwfread)
fwfread <- read.fwf("getdata-data-sst8110.for",
skip=1257,
width=200)
str(fwfread)
fwfread <- read.fwf("getdata-data-sst8110.for",
skip=1257,
width=200)
fwfread
cat(">",paste0(rep(c(1:9,"+"),6),collapse=""))
fwfread
cat(">",paste0(rep(c(1:9,"+"),6),collapse=""))
fwfread
fwfread, cat(">",paste0(rep(c(1:9,"+"),6),collapse=""))
fwfread
cat(">",paste0(rep(c(1:9,"+"),6),collapse=""))
sum(fwfread$V4)
fwfread <- read.fwf("getdata-data-sst8110.for",
skip=4, ##skip first four lines
widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(fwfread)
sum(fwfread$V4)
fwfread2 <- read.fwf("getdata-data-sst8110.for",
skip=4, ##skip first four lines
widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(fwfread2)
sum(fwfread2$V4)
