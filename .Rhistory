swirl()
library()
install.packages("swirl")
library()
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length()
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
q()
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lappy(flag_colors, sum)
lappy
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colours, mean)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lappy(flag_shapes, range)
lapply(flag_shapes, range)
shape_mat <- lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(unique(shape_mat)
)
unique_vals <- lapply(unique(shape_mat))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
q()
getwd()
dir()
setwd("C:/Users/Dangermonger/Documents/GitHub/Getting and Cleaning Data/")
setwd("C:/Users/Dangermonger/Documents/GitHub/Getting and Cleaning Data")
setwd("C:/Users/Dangermonger/Documents/GitHub/")
dir()
setwd("C:/Users/Dangermonger/Documents/GitHub/Getting-and-Cleaning-Data")
dir
dir()
DT = data.table(readfile)#
option1 <- tapply(DT$pwgtp15,DT$SEX,mean)
DT <- data.table(readfile)##converts readfile dataframe into a data table
install.packages("data.table")
library(data.table)
readfile <- read.csv("getdata-data-ss06pid.csv", colClasses = "character")
DT <- data.table(readfile)##converts readfile dataframe into a data table
str(DT)
option1 <- tapply(DT$pwgtp15,DT$SEX,mean)
tapply(DT$pwgtp15,DT$SEX,mean)
DT[,mean(pwgtp15),by=SEX]
sapply(split(DT$pwgtp15,DT$SEX),mean)
mean(DT$pwgtp15,by=DT$SEX)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
DT <- data.table(readfile)##c
tables()
option1 = {tapply(DT$pwgtp15,DT$SEX,mean)}
file <- tempfile()
write.table(option1, file=file, row.names=FALSE, col.names=TRUE, sep="\t", quote=FALSE)
system.time(fread(file))
option1 = {tapply(DT$pwgtp15,DT$SEX,mean)}
option2 = {DT[,mean(pwgtp15),by=SEX]}
option3 = {sapply(split(DT$pwgtp15,DT$SEX),mean)}
option4 = {mean(DT$pwgtp15,by=DT$SEX)}
option5 = {mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)}
option6 = {rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]}
option2 <- tapply(DT$pwgtp15,DT$SEX,mean)
file <- tempfile()
write.table(option2, file=file, row.names=FALSE, col.names=TRUE, sep="\t", quote=FALSE)
system.time(fread(file))
option3 <- tapply(DT$pwgtp15,DT$SEX,mean)
file <- tempfile()
write.table(option3, file=file, row.names=FALSE, col.names=TRUE, sep="\t", quote=FALSE)
system.time(fread(file))
option4 <- tapply(DT$pwgtp15,DT$SEX,mean)
file <- tempfile()
write.table(option4, file=file, row.names=FALSE, col.names=TRUE, sep="\t", quote=FALSE)
system.time(fread(file))
DT[, mean(PWGTP)]
DT[, mean('PWGTP')]
DT[, mean(DT$PWGTP)]
# Install eeptools
install.packages("eeptools")
# Load eeptools
library(eeptools)
# Open data
data(stulevel)
# Average ability for all students
stulevel_agg_1 <- mean(stulevel$ability, na.rm=TRUE)
# Show results
stulevel_agg_1
head(stulevel)
# Initialize the data.table package
library(data.table)
# Convert stulevel to data table
stulevel <- data.table(stulevel)
# Declare which variable you want to group on (optional).
# List the name of the data table first, then the name of the field(s).
setkey(stulevel, grade)
# Average ability by grade
stulevel_agg_2 <- as.data.frame(stulevel[, mean(ability, na.rm = TRUE),by = grade])
# Show results
stulevel_agg_2
tables()
DT2 <- as.data.frame(DT[, mean(pwgtp15, na.rm = TRUE),by = SEX])
str(readfile)
stulevel
setkey(DT, SEX)
# Average ability by grade
DT2 <- as.data.frame(DT[, mean(pwgtp15, na.rm = TRUE),by = SEX])
DT2
DT2 <- as.data.frame(DT[, mean(pwgtp15, na.rm = TRUE),by = SEX])
str(stulevel)
readfile <- read.csv("getdata-data-ss06pid.csv", colClasses = "character")
DT <- data.table(readfile)##co
setkey(DT, SEX)
DT2 <- as.data.frame(DT[, mean(pwgtp15, na.rm = TRUE),by = SEX])
stulevel_agg_2 <- as.data.frame(stulevel[, mean(ability, na.rm = TRUE),by = grade])
stulevel_agg_2
colnames(DT)
colnames(stulevel)
DT2 <- as.data.frame(DT[, mean(pwgtp15, na.rm = TRUE),by = SEX])
str(stulevel)
str(DT)
as.numeric(DT)
as.numeric(DT$pwgtp15)
DT2 <- as.data.frame(DT[, mean(pwgtp15, na.rm = TRUE),by = SEX])
str(DT)
str(DT$pwgtp15)
as.numeric(DT$pwgtp15)
str(DT$pwgtp15)
numpwgtp15 <- as.numeric(DT$pwgtp15)
str(numpwgtp15)
DT2 <- as.data.frame(DT[, mean(numpwgtp15, na.rm = TRUE),by = SEX])
DT2
system.time(DT2)
system.time({for ( i in 1:5000) {<DTt>}  })
system.time({for ( i in 1:5000) {DTt}  })
system.time({for ( i in 1:5000) {DT}  })
system.time({for ( i in 1:500000) {DT}  })
system.time({for ( i in 1:500000) {DT2}  })
DT2
str(numpwgtp15)
DT2 <- as.data.frame(DT[, mean(numpwgtp15, na.rm = TRUE)])
DT2
str(stulevel)
str(DT$SEX)
numSEX <- as.numeric(DT$SEX)
str(numSEX)
DT2 <- as.data.frame(DT[, mean(numpwgtp15, na.rm = TRUE),by = numSEX])
system.time(DT2)
DT2
newDT <- DT[, pwgtp15:=as.numeric(pwgtp15)]
str(newDT)
str(newDT$pwgtp15)
DT2 <- as.data.frame(newDT[, mean(pwgtp15, na.rm = TRUE),by = SEX])
DT2
system.time(DT2)
system.time({for ( i in 1:500000) {DT2}  })
readfile <- read.csv("getdata-data-ss06pid.csv", colClasses = "character")
convertDT <- data.table(readfile)##con
DT <- convertDT[, pwgtp15:=as.numeric(pwgtp15)]
DT2 <- as.data.frame(DT[, mean(pwgtp15, na.rm = TRUE),by = SEX])
DT2
tapply(DT$pwgtp15,DT$SEX,mean)
DT[,mean(pwgtp15),by=SEX]
option1 <- tapply(DT$pwgtp15,DT$SEX,mean)
option2 <- DT[,mean(pwgtp15),by=SEX]
option3 <- sapply(split(DT$pwgtp15,DT$SEX),mean)
option4 <- mean(DT$pwgtp15,by=DT$SEX)
option5 <- mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
option6 <- rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
system.time(option1)
system.time({for ( i in 1:500000) {option1}  })
system.time({for ( i in 1:500000) {option2}  })
system.time({for ( i in 1:500000) {option3}  })
system.time({for ( i in 1:500000) {option4}  })
system.time({for ( i in 1:500000) {option5}  })
system.time({for ( i in 1:500000) {option6}  })
colnames(DT)
pwgtp15DT <- convertDT[, pwgtp15:=as.numeric(pwgtp15)]
DT <- pwgtp15DT[, SEX:=as.numeric(SEX)]
str(DT$pwgtp15)
str(DT$SEX)
option1 <- tapply(DT$pwgtp15,DT$SEX,mean)
option2 <- DT[,mean(pwgtp15),by=SEX]
option3 <- sapply(split(DT$pwgtp15,DT$SEX),mean)
option4 <- mean(DT$pwgtp15,by=DT$SEX)
option5 <- mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
option6 <- rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
str(DT$pwgtp15)
str(DT$SEX)
pwgtp15DT <- convertDT[, pwgtp15:=as.numeric(pwgtp15)]
DT <- pwgtp15DT[, SEX:=as.numeric(SEX)]
option1 <- tapply(DT$pwgtp15,DT$SEX,mean)
option1
option6 <- rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
DT2 <- as.data.frame(DT[, mean(pwgtp15, na.rm = TRUE),by = SEX])
DT2
option6 <- rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
system.time({for ( i in 1:500000) {option1}  })
system.time({for ( i in 1:500000) {option2}  })
system.time({for ( i in 1:500000) {option3}  })
system.time({for ( i in 1:500000) {option4}  })
system.time({for ( i in 1:500000) {option5}  })
system.time({for ( i in 1:5000000) {option1}  })
system.time({for ( i in 1:5000000) {option2}  })
system.time({for ( i in 1:5000000) {option3}  })
4
system.time({for ( i in 1:5000000) {option4}  })
system.time({for ( i in 1:5000000) {option5}  })
DT <- convertDT[, pwgtp15:=as.numeric(pwgtp15)]
DT
system.time({for ( i in 1:5000000) {option1}  })
system.time({for ( i in 1:5000000) {option2}  })
system.time({for ( i in 1:5000000) {option3}  })
system.time({for ( i in 1:500000) {option3}  })
system.time({for ( i in 1:5000000) {option3}  })
str(DT$pwgtp15)
str(DT$SEX)
convertDT <- data.table(readfile)##converts readfile dataframe into a data table
tables()
DT <- convertDT[, pwgtp15:=as.numeric(pwgtp15)]
str(DT$SEX)
system.time({for ( i in 1:5000000) {option1}  })
system.time({for ( i in 1:5000000) {option2}  })
system.time({for ( i in 1:5000000) {option3}  })
system.time({for ( i in 1:5000000) {option4}  })
system.time({for ( i in 1:5000000) {option5}  })
system.time({for ( i in 1:5000000) {option1}  })
system.time({for ( i in 1:5000000) {option5}  })
option1 <- tapply(DT$pwgtp15,DT$SEX,mean)
option2 <- DT[,mean(pwgtp15),by=SEX]
option3 <- sapply(split(DT$pwgtp15,DT$SEX),mean)
option4 <- mean(DT$pwgtp15,by=DT$SEX)
option5 <- mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
option6 <- rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
system.time({for ( i in 1:5000000) {option1}  })
system.time({for ( i in 1:5000000) {option2}  })
system.time({for ( i in 1:5000000) {option3}  })
system.time({for ( i in 1:5000000) {option4}  })
system.time({for ( i in 1:5000000) {option5}  })
system.time({for ( i in 1:5000000) {option1}  })
system.time({for ( i in 1:5000000) {option2}  })
system.time({for ( i in 1:5000000) {option3}  })
system.time({for ( i in 1:5000000) {option4}  })
system.time({for ( i in 1:5000000) {option5}  })
tapply(DT$pwgtp15,DT$SEX,mean)
DT[,mean(pwgtp15),by=SEX]
sapply(split(DT$pwgtp15,DT$SEX),mean)
mean(DT$pwgtp15,by=DT$SEX)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
