swirl()
library()
install.packages("swirl")
library()
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length()
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
q()
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lappy(flag_colors, sum)
lappy
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colours, mean)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lappy(flag_shapes, range)
lapply(flag_shapes, range)
shape_mat <- lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(unique(shape_mat)
)
unique_vals <- lapply(unique(shape_mat))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
q()
getwd()
setwd("C:/Users/KOLeary/Documents/GitHub/Getting and Cleaning Data")
setwd("C:/Users/Dangermonger/Documents/GitHub/Getting-and-Cleaning-Data")
readfile <- read.csv("getdata-data-ss06pid.csv", colClasses = "character")
convertDT <- data.table(readfile)##co
library(data.table)
convertDT <- data.table(readfile)##
DT <- convertDT[, pwgtp15:=as.numeric(pwgtp15)]
DT2 <- as.data.frame(DT[, mean(pwgtp15, na.rm = TRUE),by = SEX])
DT2
system.time({for ( i in 1:5000000) {option1}  })
system.time({for ( i in 1:5000000) {option2}  })
system.time({for ( i in 1:5000000) {option3}  })
system.time({for ( i in 1:5000000) {option5}  })
option1 <- tapply(DT$pwgtp15,DT$SEX,mean)
option2 <- DT[,mean(pwgtp15),by=SEX]
option3 <- sapply(split(DT$pwgtp15,DT$SEX),mean)
##WRONG option4 <- mean(DT$pwgtp15,by=DT$SEX)
option5 <- mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
option4 <- mean(DT$pwgtp15,by=DT$SEX)
tapply(DT$pwgtp15,DT$SEX,mean)
DT[,mean(pwgtp15),by=SEX]
sapply(split(DT$pwgtp15,DT$SEX),mean)
mean(DT$pwgtp15,by=DT$SEX)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
system.time({for ( i in 1:5000000) {option1}  })
system.time({for ( i in 1:5000000) {option2}  })
system.time({for ( i in 1:5000000) {option3}  })
system.time({for ( i in 1:5000000) {option5}  })
system.time({for ( i in 1:5000000) {option1}  })
system.time({for ( i in 1:5000000) {option2}  })
system.time({for ( i in 1:5000000) {option3}  })
system.time({for ( i in 1:5000000) {option5}  })
system.time({for ( i in 1:5000000) {option1}  })
system.time({for ( i in 1:5000000) {option2}  })
system.time({for ( i in 1:5000000) {option3}  })
system.time({for ( i in 1:5000000) {option5}  })
system.time({for ( i in 1:50000000) {option1}  })
system.time({for ( i in 1:50000000) {option2}  })
system.time({for ( i in 1:50000000) {option3}  })
system.time({for ( i in 1:50000000) {option5}  })
system.time({for ( i in 1:50000000) {option1}  })
system.time({for ( i in 1:50000000) {option2}  })
system.time({for ( i in 1:50000000) {option3}  })
system.time({for ( i in 1:50000000) {option5}  })
DT2 <- as.data.frame(DT[, mean(pwgtp15, na.rm = TRUE),by = SEX])
DT2
system.time({for ( i in 1:50000000) {DT2}  })
system.time({for ( i in 1:5000000) {DT2}  })
system.time({for ( i in 1:5000000) {DT2}  })
system.time({for ( i in 1:5000000) {DT2}  })
system.time({for ( i in 1:5000000) {DT2}  })
system.time({for ( i in 1:5000000) {DT2}  })
system.time({for ( i in 1:5000000) {DT2}  })
system.time({for ( i in 1:5000000) {DT2}  })
system.time({for ( i in 1:5000000) {DT2}  })
system.time({for ( i in 1:5000000) {DT2}  })
system.time({for ( i in 1:5000000) {DT2}  })
system.time({for ( i in 1:5000000) {DT2}  })
system.time({for ( i in 1:5000000) {DT2}  })
system.time({for ( i in 1:5000000) {DT2}  })
system.time( replicate(10000, DT2) ) )
system.time( replicate(10000, DT2) )
system.time( replicate(10000, DT2) )
system.time( replicate(10000, DT2) )
system.time( replicate(10000, DT2) )
system.time( replicate(10000, DT2) )
system.time( replicate(10000, DT2) )
system.time( replicate(10000, DT2) )
system.time( replicate(10000, DT2) )
system.time( replicate(100000, DT2) )
system.time( replicate(100000, DT2) )
system.time( replicate(100000, DT2) )
system.time( replicate(100000, DT2) )
system.time( replicate(100000, option1) )
system.time( replicate(100000, option2) )
system.time( replicate(100000, option3) )
system.time( replicate(100000, option5) )
system.time( replicate(100000, option1) )
system.time( replicate(100000, option2) )
system.time( replicate(100000, option3) )
system.time( replicate(100000, option5) )
system.time( replicate(100000, option1) )
system.time( replicate(100000, option2) )
system.time( replicate(100000, option3) )
system.time( replicate(100000, option5) )
system.time( replicate(100000, option1) )
system.time( replicate(100000, option2) )
system.time( replicate(100000, option3) )
system.time( replicate(100000, option5) )
system.time( replicate(100000, option1) )
system.time( replicate(100000, option2) )
system.time( replicate(100000, option3) )
system.time( replicate(100000, option5) )
system.time( replicate(100000, option1) )
system.time( replicate(100000, option2) )
system.time( replicate(100000, option3) )
system.time( replicate(100000, option5) )
system.time( replicate(100000, option1) )
system.time( replicate(100000, option2) )
system.time( replicate(100000, option3) )
system.time( replicate(100000, option5) )
system.time( replicate(100000, option1) )
system.time( replicate(100000, option2) )
system.time( replicate(100000, option3) )
system.time( replicate(100000, option5) )
option1 <- tapply(DT$pwgtp15,DT$SEX,mean)
option2 <- DT[,mean(pwgtp15),by=SEX]
option3 <- sapply(split(DT$pwgtp15,DT$SEX),mean)
##WRONG option4 <- mean(DT$pwgtp15,by=DT$SEX)
option5 <- mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
#WRONG option6 <- rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
system.time( replicate(100000, option1) )
system.time( replicate(100000, option2) )
system.time( replicate(100000, option3) )
system.time( replicate(100000, option5) )
option5 <- mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
option6 <- rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
system.time( replicate(100000, option1) )
system.time( replicate(100000, option2) )
system.time( replicate(100000, option3) )
tables()
system.time( replicate(100000, option1) )
system.time( replicate(100000, option2) )
system.time( replicate(100000, option3) )
system.time( replicate(100000, option1) )
system.time( replicate(100000, option2) )
system.time( replicate(100000, option3) )
system.time( replicate(100000, option1) )
system.time( replicate(100000, option2) )
system.time( replicate(100000, option3) )
system.time( replicate(100000, option1) )
##system.time( replicate(100000, option2) )
system.time( replicate(100000, option3) )
system.time( replicate(100000, option1) )
##system.time( replicate(100000, option2) )
system.time( replicate(100000, option3) )
system.time( replicate(100000, option1) )
##system.time( replicate(100000, option2) )
system.time( replicate(100000, option3) )
system.time( replicate(1000000, option1) )
##system.time( replicate(100000, option2) )
system.time( replicate(1000000, option3) )
system.time( replicate(1000000, option1) )
##system.time( replicate(100000, option2) )
system.time( replicate(1000000, option3) )
system.time( replicate(1000000, option1) )
##system.time( replicate(100000, option2) )
system.time( replicate(1000000, option3) )
library(swirl)
rm(list=ls())
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
mydf <- read.csv("path2csv", stringAsFactors = FALSE)
mydf <- read.csv(file = path2csv, stringAsFactors = FALSE)
mydf <- read.csv("path2csv", stringAsFactors = FALSE)
?read.csv
read.csv(path2csv)
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -X:size)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1, country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version =< "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, r_version = !is.na())
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size -1000)
mutate(cran3, correct_size = size  + 1000)
avg_bytes <- summarize(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
